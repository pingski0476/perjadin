import {
  Center,
  Container,
  Box,
  Text,
  FormControl,
  FormLabel,
  Input,
  Button,
  VStack,
  Select,
  Textarea,
  HStack,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalCloseButton,
  useDisclosure,
  TableContainer,
  Table,
  Thead,
  Tr,
  Td,
  Th,
  Tbody,
  useToast,
} from "@chakra-ui/react";
import { ArrowLeftIcon, ArrowRightIcon } from "@chakra-ui/icons";
import Head from "next/head";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { SingleDatepicker } from "chakra-dayzed-datepicker";
import Link from "next/link";
import { useST, useUserStore, client, address } from "../../store/store";
import { useRouter } from "next/router";
import Navbar from "../../components/Navbar";
import PegawaiForm from "../../components/PegawaiForm";
import pocketbaseEs from "pocketbase";

export default function Dashboard() {
  //declaring router variables
  const router = useRouter();

  const pocket = new pocketbaseEs(address);

  //declaring pagination state
  const [countPage, setCountPage] = useState(1);

  //declaring state to store surat tugas data
  const { dataST, setDataST } = useST((state) => state);

  //declaring state to store paginated
  const { dataSTObj, setData } = useST((state) => state);

  //declaring global state using zustand
  const { currentUser, logoutUser } = useUserStore((state) => state);

  //declaring state to store daftar pegawai
  const [listPegawai, setListPegawai] = useState([]);

  //declaring state for date picker berangkat and kembali
  const [date1, setDate1] = useState(new Date());
  const [date2, setDate2] = useState(new Date());

  //declaring toast for error
  const errorToast = useToast();

  //declaring toast if the post is successful
  const successToast = useToast();

  //declaring rect-hook-form
  const {
    handleSubmit,
    reset,
    register,
    formState: { isSubmitSuccessful },
  } = useForm();

  //declaring state to reset the form
  const [safeToReset, setSafeToReset] = useState(false);

  //declaring modal state open or close for SPT Form
  const modalSPT = useDisclosure();

  //declaring modal state open or close for Adding Pegawai Form
  const modalPegawai = useDisclosure();

  //function to fetch surat tugas data
  const getDataST = async () => {
    try {
      let dataSuratTugas = await pocket
        .collection("surat_tugas")
        .getFullList(1400, {
          sort: "+created",
          expand: "pegawai_1, pegawai_2, pegawai_3, pegawai_4, pegawai_5",
        });
      setDataST(dataSuratTugas);
    } catch (error) {
      console.log(error);
    }
  };

  const getData = async () => {
    try {
      let data = await client.collection("surat_tugas").getList(1, 10, {
        sort: "-created",
        expand: "pegawai_1, pegawai_2, pegawai_3, pegawai_4, pegawai_5",
        page: countPage,
      });
      setData(data);
    } catch (error) {
      console.log(error);
    }
  };

  //fungsi untuk fetching data pegawai
  const getDataPegawai = async () => {
    try {
      let dataPegawai = await client
        .collection("daftar_pegawai")
        .getFullList(150, { sort: "+created" });
      setListPegawai(dataPegawai);
    } catch (error) {
      console.log(error);
    }
  };

  //function to do increment on Nomor Surat Tugas
  const nomorST = dataST.length + 1;

  //function for handling submit function
  const submitHandler = async (data) => {
    data.nomor = nomorST;
    data.tanggal_berangkat = date1.toJSON();
    data.tanggal_kembali = date2.toJSON();
    try {
      await client.collection("surat_tugas").create(data);
      setSafeToReset(true);
    } catch (error) {
      errorToast({
        position: "top",
        title: "Submit Gagal",
        description: "Input data gagal",
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    }
  };

  const refresh = () => {
    window.location.reload();
  };

  useEffect(() => {
    if (safeToReset) {
      reset();
      setSafeToReset(false);
      modalSPT.onClose();
    }
    if (isSubmitSuccessful) {
      successToast({
        position: "top",
        title: "Submit Sukses",
        description: "Sukses membuat surat tugas baru",
        status: "success",
        duration: 3000,
        isClosable: true,
      });
      refresh();
    }
  }, [safeToReset]);

  useEffect(() => {
    getDataST();
  }, []);

  useEffect(() => {
    getData();
    getDataPegawai();
  }, [countPage]);

  useEffect(() => {
    if (currentUser === null) {
      router.push("/");
    }
  }, [currentUser]);

  const obj = dataSTObj.items;

  const decPage = () => {
    setCountPage(countPage - 1);
  };
  const incPage = () => {
    setCountPage(countPage + 1);
  };

  return (
    <>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxW={"100%"} flex={1}>
        <Navbar logout={logoutUser} />
        <Center maxW={"100vw"} p={4}>
          <VStack>
            <Text
              textAlign={"center"}
              my={3}
              fontSize={"xl"}
              fontWeight={"semibold"}
            >
              Input Data
            </Text>
            <Box
              w={"2xl"}
              display={"flex"}
              p={2}
              justifyContent={"space-between"}
            >
              <HStack>
                <Button colorScheme={"green"} onClick={modalSPT.onOpen}>
                  Tambah
                </Button>
                <Button
                  onClick={modalPegawai.onOpen}
                  colorScheme={"blue"}
                  w={"100%"}
                  mt={4}
                >
                  Tambah Pegawai
                </Button>
              </HStack>
            </Box>
            <Modal isOpen={modalSPT.isOpen} onClose={modalSPT.onClose}>
              <ModalOverlay />
              <ModalContent w={"2xl"}>
                <ModalHeader textAlign={"center"}>Tambah Kegiatan</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                  <Box bgColor={"white"} borderRadius={"md"} p={4}>
                    <form onSubmit={handleSubmit(submitHandler)}>
                      <HStack>
                        <FormControl>
                          <FormLabel>Nomor Surat Tugas</FormLabel>
                          <Input
                            type={"number"}
                            name={"nomor"}
                            disabled={true}
                            defaultValue={nomorST}
                            {...register("nomor")}
                          />
                        </FormControl>
                        <FormControl isRequired>
                          <FormLabel>Pegawai 1</FormLabel>
                          <Select
                            placeholder="Pilih Pegawai"
                            name="pegawai_1"
                            {...register("pegawai_1")}
                          >
                            {listPegawai.map((list) => {
                              return (
                                <option key={list.id} value={list.id}>
                                  {list.nama}
                                </option>
                              );
                            })}
                          </Select>
                        </FormControl>
                      </HStack>
                      <HStack>
                        <FormControl>
                          <FormLabel>Pegawai 2</FormLabel>
                          <Select
                            placeholder="Pilih Pegawai"
                            name="pegawai_2"
                            {...register("pegawai_2")}
                          >
                            {listPegawai.map((list) => {
                              return (
                                <option key={list.id} value={list.id}>
                                  {list.nama}
                                </option>
                              );
                            })}
                          </Select>
                        </FormControl>
                        <FormControl>
                          <FormLabel>Pegawai 3</FormLabel>
                          <Select
                            placeholder="Pilih Pegawai"
                            name="pegawai_3"
                            {...register("pegawai_3")}
                          >
                            {listPegawai.map((list) => {
                              return (
                                <option key={list.id} value={list.id}>
                                  {list.nama}
                                </option>
                              );
                            })}
                          </Select>
                        </FormControl>
                      </HStack>
                      <HStack>
                        <FormControl>
                          <FormLabel>Pegawai 4</FormLabel>
                          <Select
                            placeholder="Pilih Pegawai"
                            name="pegawai_4"
                            {...register("pegawai_4")}
                          >
                            {listPegawai.map((list) => {
                              return (
                                <option key={list.id} value={list.id}>
                                  {list.nama}
                                </option>
                              );
                            })}
                          </Select>
                        </FormControl>
                        <FormControl>
                          <FormLabel>Pegawai 5</FormLabel>
                          <Select
                            placeholder="Pilih Pegawai"
                            name="pegawai_5"
                            {...register("pegawai_5")}
                          >
                            {listPegawai.map((list) => {
                              return (
                                <option key={list.id} value={list.id}>
                                  {list.nama}
                                </option>
                              );
                            })}
                          </Select>
                        </FormControl>
                      </HStack>
                      <FormControl isRequired>
                        <FormLabel>Kendaraan</FormLabel>
                        <Select
                          placeholder="Pilih Kendaraan"
                          name="kendaraan"
                          {...register("kendaraan")}
                        >
                          <option value={"kendaraan_umum"}>
                            Kendaraan Umum
                          </option>
                          <option value={"kendaraan_dinas"}>
                            Kendaraan Dinas
                          </option>
                        </Select>
                      </FormControl>
                      <HStack>
                        <FormControl isRequired>
                          <FormLabel>Kota Asal</FormLabel>
                          <Input
                            type={"text"}
                            name={"kota_asal"}
                            {...register("kota_asal")}
                          />
                        </FormControl>
                        <FormControl isRequired>
                          <FormLabel>Kota Tujuan</FormLabel>
                          <Input
                            type={"text"}
                            name={"kota_tujuan"}
                            {...register("kota_tujuan")}
                          />
                        </FormControl>
                      </HStack>
                      <HStack>
                        <FormControl isRequired>
                          <FormLabel>Tanggal Berangkat</FormLabel>
                          <SingleDatepicker
                            name={"tanggal_berangkat"}
                            date={date1}
                            value={date1.toJSON()}
                            onDateChange={setDate1}
                            {...register("tanggal_berangkat")}
                          />
                        </FormControl>
                        <FormControl isRequired>
                          <FormLabel>Tanggal Kembali</FormLabel>
                          <SingleDatepicker
                            name={"tanggal_kembali"}
                            date={date2}
                            onDateChange={setDate2}
                            {...register("tanggal_kembali")}
                          />
                        </FormControl>
                      </HStack>

                      <FormControl isRequired>
                        <FormLabel>Dalam Rangka</FormLabel>
                        <Textarea
                          placeholder="Masukkan tujuan perjalanan"
                          name="dalam_rangka"
                          {...register("dalam_rangka")}
                        />
                      </FormControl>

                      <Button
                        mx={"auto"}
                        type="submit"
                        mt={4}
                        colorScheme="green"
                        w={"100%"}
                      >
                        Submit
                      </Button>
                    </form>
                  </Box>
                </ModalBody>
              </ModalContent>
            </Modal>

            <Modal isOpen={modalPegawai.isOpen} onClose={modalPegawai.onClose}>
              <ModalOverlay />
              <ModalContent w={"2xl"}>
                <ModalHeader textAlign={"center"}>
                  Input Data Pegawai
                </ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                  <PegawaiForm onClose={modalPegawai.onClose} />
                </ModalBody>
              </ModalContent>
            </Modal>

            <TableContainer>
              <Table variant={"striped"}>
                <Thead fontSize={"xl"}>
                  <Tr>
                    <Th>Nomor</Th>
                    <Th>Pelaksana</Th>
                    <Th>Tujuan</Th>
                    <Th>Tanggal Berangkat</Th>
                    <Th>Tanggal ST</Th>
                    <Th>Details</Th>
                  </Tr>
                </Thead>
                <Tbody>
                  {obj?.map((data) => {
                    let tanggal_berangkat = new Date(data.tanggal_berangkat);
                    let tanggal_st = new Date(data.created);
                    let pegawai = data.expand;
                    let stMonth = tanggal_st.getMonth() + 1;
                    let stYear = tanggal_st.getFullYear();
                    function test() {
                      if (stMonth < 10) {
                        let bulan = "0" + stMonth;
                        return bulan;
                      } else {
                        let bulan = stMonth;
                        return bulan;
                      }
                    }
                    const month = test();

                    return (
                      <Tr key={data.nomor}>
                        {data.nomor < 10 ? (
                          <Td>{`0${data.nomor}/TU.040/A.10/${month}/${stYear}`}</Td>
                        ) : (
                          <Td>{`${data.nomor}/TU.040/A.10/${month}/${stYear}`}</Td>
                        )}

                        <Td>
                          {pegawai.pegawai_1.nama} <br /> <br />
                        </Td>
                        <Td>{data.kota_tujuan}</Td>
                        <Td>{tanggal_berangkat.toLocaleDateString("en-GB")}</Td>
                        <Td>{tanggal_st.toLocaleDateString("en-GB")}</Td>
                        <Td>
                          <Link href={`/dashboard/${data.id}`} key={data.id}>
                            <Button colorScheme={"blue"}>Details</Button>
                          </Link>
                        </Td>
                      </Tr>
                    );
                  })}
                </Tbody>
              </Table>
              <HStack mt={3}>
                {dataSTObj.page === 1 ? (
                  <Button
                    colorScheme={"blue"}
                    disabled={true}
                    onClick={decPage}
                  >
                    {" "}
                    <ArrowLeftIcon />{" "}
                  </Button>
                ) : (
                  <Button colorScheme={"blue"} onClick={decPage}>
                    {" "}
                    <ArrowLeftIcon />{" "}
                  </Button>
                )}
                {dataSTObj.page === dataSTObj.totalPages ? (
                  <Button
                    colorScheme={"blue"}
                    disabled={true}
                    onClick={incPage}
                  >
                    <ArrowRightIcon />
                  </Button>
                ) : (
                  <Button colorScheme={"blue"} onClick={incPage}>
                    <ArrowRightIcon />
                  </Button>
                )}
              </HStack>
            </TableContainer>
          </VStack>
        </Center>
      </Container>
    </>
  );
}
