import {
  Center,
  Container,
  Box,
  Text,
  Button,
  Input,
  TableContainer,
  Table,
  Thead,
  Tr,
  Td,
  Th,
  Tbody,
  VStack,
  HStack,
} from "@chakra-ui/react";

import { ArrowLeftIcon, ArrowRightIcon } from "@chakra-ui/icons";
import Head from "next/head";
import { useEffect, useMemo, useState } from "react";
import { address, useUserStore } from "../../store/store";
import pocketbaseEs from "pocketbase";
import Navbar from "../../components/Navbar";
import { useRouter } from "next/router";

export default function Kepegawaian() {
  //declaring api endpoint
  const pocket = new pocketbaseEs(address);

  //declaring router variables
  const router = useRouter();

  //declaring pagination state
  const [countPage, setCountPage] = useState(1);

  //declaring state for SPD List
  const [listSpd, setListSpd] = useState([]);

  const [filteredName, setFilteredName] = useState("");

  //reading state for user state
  const { currentUser, logoutUser } = useUserStore((state) => state);

  //declaring function to fetch data from endpoint
  async function getList() {
    try {
      let spdData = await pocket.collection("spd").getList(1, 50, {
        sort: "+created",
        expand: "surat_tugas, pegawai",
        page: countPage,
      });
      setListSpd(spdData);
    } catch (error) {
      console.log(error);
    }
  }

  //declaring function to render the data
  useEffect(
    function () {
      getList();
    },
    [countPage]
  );

  useEffect(() => {
    if (currentUser === null) {
      router.push("/");
    }
  }, [currentUser]);

  const daftarSpd = listSpd?.items;
  const filteredSpd = useMemo(
    () =>
      daftarSpd?.filter((list) => {
        return list.expand.pegawai.nama
          .toLowerCase()
          .includes(filteredName.toLowerCase());
      }),
    [filteredName, daftarSpd]
  );

  const decPage = () => {
    setCountPage(countPage - 1);
  };
  const incPage = () => {
    setCountPage(countPage + 1);
  };
  return (
    <>
      <Head>
        <title>Kepegawaian</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxW={"100%"} flex={1}>
        <Navbar logout={logoutUser} />
        <Center maxW={"100vw"} p={4}>
          <VStack>
            <Text
              textAlign={"center"}
              my={3}
              fontSize={"xl"}
              fontWeight={"semibold"}
            >
              Data SPD
            </Text>
            <Input
              placeholder="Masukkan nama pelaksana"
              value={filteredName}
              onChange={(e) => setFilteredName(e.target.value)}
              my={2}
            />
            <TableContainer>
              <Table variant={"striped"}>
                <Thead fontSize={"xl"}>
                  <Tr>
                    <Th>Nomor ST</Th>
                    <Th>Nomor SPD</Th>
                    <Th>Pelaksana</Th>
                    <Th>Tanggal Berangkat</Th>
                    <Th>Tujuan</Th>
                    <Th>Jumlah OH</Th>
                  </Tr>
                </Thead>
                <Tbody>
                  {filteredSpd?.map((spd) => {
                    let suratTugas = spd.expand.surat_tugas;
                    let pegawai = spd.expand.pegawai;
                    let tanggal = new Date(suratTugas.created);
                    let stMonth = tanggal.getMonth() + 1;
                    let stYear = tanggal.getFullYear();
                    let tanggalBerangkat = new Date(
                      suratTugas.tanggal_berangkat
                    );
                    let tanggalTiba = new Date(suratTugas.tanggal_kembali);
                    let dayBerangkat = tanggalBerangkat.getDate();
                    let dayTiba = tanggalTiba.getDate();
                    let dayOH = dayTiba - dayBerangkat + 1;
                    function test() {
                      if (stMonth < 10) {
                        let bulan = "0" + stMonth;
                        return bulan;
                      } else {
                        let bulan = stMonth;
                        return bulan;
                      }
                    }

                    const month = test();
                    return (
                      <Tr key={spd.id}>
                        {suratTugas.nomor < 10 ? (
                          <Td>{`0${suratTugas.nomor}/TU.040/A.10/${month}/${stYear}`}</Td>
                        ) : (
                          <Td>{`${suratTugas.nomor}/TU.040/A.10/${month}/${stYear}`}</Td>
                        )}

                        {spd.nomor < 10 ? (
                          <Td>{`0${spd.nomor}/TU.040/A.10/${month}/${stYear}`}</Td>
                        ) : (
                          <Td>{`${spd.nomor}/TU.040/A.10/${month}/${stYear}`}</Td>
                        )}

                        <Td>{pegawai.nama}</Td>
                        <Td>{tanggalBerangkat.toLocaleDateString("en-GB")}</Td>
                        <Td>{suratTugas.kota_tujuan}</Td>
                        <Td>{`${dayOH} (OH)`}</Td>
                      </Tr>
                    );
                  })}
                </Tbody>
              </Table>
              <HStack mt={3}>
                <Button colorScheme={"blue"}>
                  <ArrowLeftIcon />
                </Button>
                <Button colorScheme={"blue"}>
                  <ArrowRightIcon />
                </Button>
              </HStack>
            </TableContainer>
          </VStack>
        </Center>
      </Container>
    </>
  );
}
